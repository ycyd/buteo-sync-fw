/*
 * YOUR LICENSE TEXT HERE
 *
 */

\#ifndef $(plugin.classname)_H
\#define $(plugin.classname)_H

// Include this header if you are using storage plugins
\#include "SyncMLStorageProvider.h"
\#include <ClientPlugin.h>
\#include <SyncResults.h>

/*! \brief Implementation for client plugin
 *
 */
class $plugin.classname : public Buteo::ClientPlugin
{
    Q_OBJECT;
public:

    /*! \brief Constructor
     *
     * @param aPluginName Name of this client plugin
     * @param aProfile Sync profile
     * @param aCbInterface Pointer to the callback interface
     */
    $plugin.classname ( const QString& pluginName,
                  const Buteo::SyncProfile& profile,
                  Buteo::PluginCbInterface *cbInterface );

    /*! \brief Destructor
     *
     * Call uninit before destroying the object.
     */
    virtual ~$(plugin.classname)();

    //! @see SyncPluginBase::init
    virtual bool init();

    //! @see SyncPluginBase::uninit
    virtual bool uninit();

    //! @see ClientPlugin::startSync
    virtual bool startSync();

    //! @see SyncPluginBase::abortSync
    virtual void abortSync(Sync::SyncStatus status = Sync::SYNC_ABORTED);

    //! @see SyncPluginBase::getSyncResults
    virtual Buteo::SyncResults getSyncResults() const;

    //! @see SyncPluginBase::cleanUp
    virtual bool cleanUp();

public slots:

    //! @see SyncPluginBase::connectivityStateChanged
    virtual void connectivityStateChanged( Sync::ConnectivityType aType,
                                           bool aState );

protected slots:

    /*!
     * \brief state change slot for MyProtocol::SyncAgent::stateChanged signal
     * \param aState - new state
     */
    void syncStateChanged (MyProtocol::SyncState state);

    /*!
     * \brief sync Finished slot for MyProtocol::SyncAgent::syncFinished signal
     * \param aState - final state
     */
    void syncFinished (MyProtocol::SyncState state);

    /*!
     * \brief slot for MyProtocol::SyncAgent::storageAcquired signal
     * \param aMimeType - mimetype of the storage acquired.
     */
    void storageAccquired (QString mimeType);

    /*!
     * \brief slot for MyProtocol::SyncAgent::itemProcessed signal
     * \param aModificationType - modification type
     * \param aModifiedDatabase - modified database .
     * \param aLocalDatabase - local database
     * \param aMimeType - mime type of the database
     * \param aCommittedItems - No. of items committed for this operation
     */
    void receiveItemProcessed (MyProtocol::ModificationType modificationType,
                                MyProtocol::ModifiedDatabase modifiedDatabase,
                                QString localDatabase,
                                QString mimeType,
                                int committedItems );

private:

    bool initAgent();

    void closeAgent();

    bool initTransport();

    void closeTransport();

    bool initConfig();

    void closeConfig();

    void generateResults (bool successful);

    /*! \brief Resolves sync direction from current profile
     *
     * @param aInitiator Initiator of the sync
     * @return Resolved sync direction
     */
    MyProtocol::SyncDirection resolveSyncDirection (const MyProtocol::SyncInitiator& Initiator);

    /*! \brief Resolves conflict resolution policy from current profile
     *
     * @param aInitiator Initiator of the sync
     * @return Resolved conflict resolution policy
     */
    MyProtocol::ConflictResolutionPolicy resolveConflictResolutionPolicy (const MyProtocol::SyncInitiator& initiator);

    QMap<QString, QString>      mProperties;

    MyProtocol::SyncAgent*      mAgent;

    MyProtocol::AgentConfig*    mAgentConfig;

    MyTransport*                mTransport;

    Buteo::SyncResults          mResults;

    quint32                     mCommittedItems;

};

/*! \brief Creates $plugin.classname client plugin
 *
 * @param aPluginName Name of this client plugin
 * @param aProfile Profile to use
 * @param aCbInterface Pointer to the callback interface
 * @return Client plugin on success, otherwise NULL
 */
extern "C" $(plugin.classname)* createPlugin (const QString& pluginName,
                                         const Buteo::SyncProfile& profile,
                                         Buteo::PluginCbInterface *cbInterface );

/*! \brief Destroys $plugin.classname client plugin
 *
 * @param aServer $plugin.classname client plugin instance to destroy
 */
extern "C" void destroyPlugin( $plugin.classname *client );

\#endif  //  $plugin.classname
